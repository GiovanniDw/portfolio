{"version":3,"sources":["components/Menu/index.jsx","sections/About.jsx","sections/Work.jsx","sections/Contact.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Menu","state","className","href","to","spy","smooth","offset","duration","hashSpy","src","process","alt","Component","About","id","role","Work","App","style","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAuDeA,E,4MAlDXC,MAAQ,G,uDAEJ,OACL,+BACC,yBAAKC,UAAU,YACd,kBAAC,OAAD,CACCC,KAAK,SACLC,GAAG,QACHC,KAAK,EACLC,QAAQ,EACRC,OAAQ,EACRC,SAAU,IACVC,SAAS,GAET,yBACCC,IAAKC,6BACLT,UAAU,WACVU,IAAI,UAGN,kBAAC,OAAD,CACCT,KAAK,QACLC,GAAG,OACHC,KAAK,EACLC,QAAQ,EACRC,OAAQ,EACRC,SAAU,IACVC,SAAS,GAPV,QAWA,kBAAC,OAAD,CACCN,KAAK,WACLC,GAAG,UACHC,KAAK,EACLC,QAAQ,EACRC,OAAQ,EACRC,SAAU,IACVC,SAAS,GAPV,iB,GAhCcI,aCFEC,E,uKAEb,OACL,6BAASC,GAAG,QAAQb,UAAU,SAC7B,kCACI,0BAAMc,KAAK,OAAX,gBADJ,KACgC,6BADhC,aACoD,IACnD,0BAAMd,UAAU,WAAhB,YAFD,IAE2C,6BAF3C,gC,GAJ+BW,aCAdI,E,uKAEnB,OACC,6BAASF,GAAG,OAAOb,UAAU,QAC5B,oCAEA,kCACA,kCACA,kCACA,uC,GAT8BW,aCAbI,E,uKAEnB,OACC,6BAASF,GAAG,UAAUb,UAAU,WAC/B,4C,GAJ8BW,aC4BnBK,G,6KApBb,OACC,yBACChB,UAAU,MACViB,MAAO,CACNC,WAAW,OAAD,OACTT,2BADS,2BAKX,kBAAC,EAAD,MACA,8BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAfaE,cCIEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bf94c39.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport { Link } from 'react-scroll';\n\n\nclass Menu extends Component {\n    state = {};\n    render() {\n        return (\n\t\t\t<aside>\n\t\t\t\t<nav className='main-nav'>\n\t\t\t\t\t<Link\n\t\t\t\t\t\thref='#About'\n\t\t\t\t\t\tto='about'\n\t\t\t\t\t\tspy={true}\n\t\t\t\t\t\tsmooth={true}\n\t\t\t\t\t\toffset={0}\n\t\t\t\t\t\tduration={500}\n\t\t\t\t\t\thashSpy={true}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={process.env.PUBLIC_URL + '/images/logo.svg'}\n\t\t\t\t\t\t\tclassName='App-logo'\n\t\t\t\t\t\t\talt='logo'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link\n\t\t\t\t\t\thref='#Work'\n\t\t\t\t\t\tto='work'\n\t\t\t\t\t\tspy={true}\n\t\t\t\t\t\tsmooth={true}\n\t\t\t\t\t\toffset={0}\n\t\t\t\t\t\tduration={500}\n\t\t\t\t\t\thashSpy={true}\n\t\t\t\t\t>\n\t\t\t\t\t\tWork\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link\n\t\t\t\t\t\thref='#Contact'\n\t\t\t\t\t\tto='contact'\n\t\t\t\t\t\tspy={true}\n\t\t\t\t\t\tsmooth={true}\n\t\t\t\t\t\toffset={0}\n\t\t\t\t\t\tduration={500}\n\t\t\t\t\t\thashSpy={true}\n\t\t\t\t\t>\n\t\t\t\t\t\tContact\n\t\t\t\t\t</Link>\n\t\t\t\t</nav>\n\t\t\t</aside>\n\t\t);\n    }\n}\n\n\n\nexport default Menu;\n\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n\t\t\t<section id='About' className='about'>\n\t\t\t\t<h1>\n\t\t\t\t\tHi <span role='img'>ðŸ‘‹</span>, <br></br>My name is{' '}\n\t\t\t\t\t<span className='my-name'>Giovanni</span>,<br></br> Iâ€™m a CMD student\n\t\t\t\t</h1>\n\t\t\t</section>\n\t\t);\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Work extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<section id='Work' className=\"work\">\n\t\t\t\t<h2>Work</h2>\n\n\t\t\t\t<article></article>\n\t\t\t\t<article></article>\n\t\t\t\t<article></article>\n\t\t\t\t<article></article>\n\t\t\t</section>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\n\nexport default class Work extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<section id='Contact' className='contact'>\n\t\t\t\t<h2>Contact</h2>\n\t\t\t</section>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport About from './sections/About';\nimport Work from './sections/Work';\nimport Contact from './sections/Contact';\n\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='App'\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: `url(${\n\t\t\t\t\t\tprocess.env.PUBLIC_URL + '/images/bg.svg'\n\t\t\t\t\t}) no-repeat 10% fixed`,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Menu />\n\t\t\t\t<main>\n\t\t\t\t\t<About />\n\t\t\t\t\t<Work />\n\t\t\t\t\t<Contact />\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}